Index: hack_tool/llama_api/proccess.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport requests\r\n\r\ndef prepare_prompt(reviews):\r\n    field_definitions = (\r\n        \"Поля для сводки в формате JSON:\\n\"\r\n        \"1. summary: Краткое описание сотрудника на основе отзывов. Строка.\\n\"\r\n        \"2. parameters: Оценки ключевых параметров сотрудника. Объект, где каждый параметр представлен объектом с полями:\\n\"\r\n        \"   - rating: Оценка от 1 до 5\\n\"\r\n        \"   - description: Краткая характеристика, описывающая данный параметр на основе оценки и отзывов.\\n\"\r\n        \"3. strengths: Сильные стороны сотрудника. Массив строк.\\n\"\r\n        \"4. weaknesses: Слабые стороны сотрудника. Массив строк.\\n\"\r\n        \"5. recommendations: Рекомендации по улучшению. Массив строк.\\n\"\r\n    )\r\n\r\n    instructions = (\r\n        \"Ты профессиональный HR-специалист.\\n\"\r\n        \"Вот определенное количество отзывов о сотруднике:\\n\\n\"\r\n    )\r\n\r\n    if not reviews:\r\n        return \"Нет отзывов для анализа.\"\r\n\r\n    for i, review in enumerate(reviews, start=1):\r\n        if review[2].strip():  # Проверка на пустые отзывы\r\n            instructions += f\"Отзыв {i}:\\n{review[2]}\\n\\n\"\r\n\r\n    instructions += f\"user_id: {reviews[0][1]}\\n\"\r\n\r\n    instructions += (\r\n        \"На основе этих отзывов нужно создать подробную сводку в формате JSON, используя следующие поля:\\n\\n\"\r\n        '  \"user_id\": \"\",\\n'\r\n        '  \"role\": \"Предположительная роль сотрудника только 1 вариант\",\\n'\r\n        + field_definitions +\r\n        \"\\nСгенерируй JSON-объект, который строго следует указанной структуре. Пример:\\n\\n\"\r\n        \"{\\n\"\r\n        '  \"summary\": \"Краткое описание сотрудника\",\\n'\r\n        '  \"parameters\": {\\n'\r\n        '      \"Коммуникабельность\": {\\n'\r\n        '          \"rating\": 5,\\n'\r\n        '          \"description\": \"Отличные навыки общения, легко взаимодействует с коллегами.\"\\n'\r\n        '      },\\n'\r\n        '      \"Ответственность\": {\\n'\r\n        '          \"rating\": 4,\\n'\r\n        '          \"description\": \"Ответственный и надежный сотрудник, почти всегда выполняет задачи в срок.\"\\n'\r\n        '      }\\n'\r\n        '      // Другие параметры\\n'\r\n        \"  },\\n\"\r\n        '  \"strengths\": [\\n'\r\n        '      \"Сильная сторона 1\",\\n'\r\n        '      \"Сильная сторона 2\"\\n'\r\n        \"  ],\\n\"\r\n        '  \"weaknesses\": [\\n'\r\n        '      \"Слабая сторона 1\",\\n'\r\n        '      \"Слабая сторона 2\"\\n'\r\n        \"  ],\\n\"\r\n        '  \"recommendations\": [\\n'\r\n        '      \"Рекомендация 1\",\\n'\r\n        '      \"Рекомендация 2\"\\n'\r\n        \"  ]\\n\"\r\n        \"}\\n\\n\"\r\n        \"Пожалуйста, соблюдай формат JSON и используй кодировку UTF-8. Работай только с текущими данными, не учитывая контекст прошлых ответов. \"\r\n        \"Также, прошу заполнить все пункты, включая weakness и recommendations, даже если нечего добавить. Это важно!\\n\"\r\n        \"Прошу объективно оценивать, чтобы избежать предвзятости в присвоении премии. Если отзыв несет негативный контекст, \"\r\n        \"учти это при оценке, если ты видишь негативную оценку, то пусть это влияет на окончательный ответ, пожалуйста.\\n\"\r\n    )\r\n\r\n    return instructions\r\n\r\n\r\ndef proccess_lama(prompt):\r\n    url = \"https://vk-scoreworker-case-backup.olymp.innopolis.university/generate\"\r\n\r\n    # Регулярное выражение для валидации JSON-ответа\r\n    regex_pattern = r'^\\{\\s*\"summary\":\\s*\".+?\",\\s*\"parameters\":\\s*\\{(?:\\s*\".+?\":\\s*[1-5],?\\s*)+\\},\\s*\"strengths\":\\s*\\[.+?\\],\\s*\"weaknesses\":\\s*\\[.+?\\],\\s*\"recommendations\":\\s*\\[.+?\\]\\s*\\}$'\r\n\r\n    data = {\r\n        \"prompt\": [prompt],\r\n        \"apply_chat_template\": True,\r\n        \"system_prompt\": \"Ты профессиональный инструмент для HR специалиста\",\r\n        \"max_tokens\": 100000,\r\n        \"top_k\":  50,\r\n        \"temperature\": 0.3,\r\n        \"n\": 3,\r\n        \"best_of\": 3\r\n    }\r\n\r\n    headers = {\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n\r\n    response = requests.post(url, data=json.dumps(data), headers=headers)\r\n\r\n    if response.status_code == 200:\r\n        print(response.json())\r\n        return response.json()\r\n    else:\r\n        return f\"Error: {response.status_code} - {response.text}\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hack_tool/llama_api/proccess.py b/hack_tool/llama_api/proccess.py
--- a/hack_tool/llama_api/proccess.py	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/hack_tool/llama_api/proccess.py	(date 1730673807714)
@@ -78,9 +78,9 @@
         "prompt": [prompt],
         "apply_chat_template": True,
         "system_prompt": "Ты профессиональный инструмент для HR специалиста",
-        "max_tokens": 100000,
+        "max_tokens": 10000,
         "top_k":  50,
-        "temperature": 0.3,
+        "temperature": 0.4,
         "n": 3,
         "best_of": 3
     }
Index: hack_tool/hr/hr_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import jsonify, request\r\nfrom flask import Blueprint\r\n\r\nfrom hack_tool.bl_models.employee_bl import EmployeeBL\r\nfrom hack_tool.bl_models.hr_bl import HrBl\r\n\r\nhr_route = Blueprint(\"hr_routes\", __name__)\r\n\r\n\r\n@hr_route.route('/employees', methods=['GET'])\r\ndef get_employees():\r\n    employees = EmployeeBL.get_list_employees_with_review_count()\r\n\r\n\r\n    return employees\r\n\r\n\r\n@hr_route.route('/employees/<int:user_id>', methods=['GET'])\r\ndef get_employee(user_id):\r\n\r\n    employee = EmployeeBL.get_employee(user_id)\r\n\r\n    employee.append({\r\n        \"average_rating\": average_rating\r\n    })\r\n\r\n    if employee is None:\r\n\r\n        return jsonify({\"error\": \"Employee not found\"}), 404\r\n\r\n\r\n    return jsonify(employee), 200\r\n\r\n@hr_route.route('/employees/<int:user_id>/summary', methods=['GET'])\r\ndef get_employee_summary(user_id):\r\n    print(user_id)\r\n    summary = HrBl.create_summary(user_id)\r\n\r\n    if summary is None:\r\n\r\n        return jsonify({\"error\": \"Summary can't creatable\"}), 404\r\n\r\n\r\n    return jsonify(summary), 200
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hack_tool/hr/hr_routes.py b/hack_tool/hr/hr_routes.py
--- a/hack_tool/hr/hr_routes.py	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/hack_tool/hr/hr_routes.py	(date 1730673960842)
@@ -19,11 +19,6 @@
 def get_employee(user_id):
 
     employee = EmployeeBL.get_employee(user_id)
-
-    employee.append({
-        "average_rating": average_rating
-    })
-
     if employee is None:
 
         return jsonify({"error": "Employee not found"}), 404
Index: hack_tool/employee/employee_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, jsonify\r\n\r\nfrom hack_tool.bl_models.employee_bl import EmployeeBL\r\n\r\nemployee_route = Blueprint(\"employee_routes\", __name__)\r\n\r\n\r\n@employee_route.route('/profile/<int:user_id>', methods=['GET'])\r\ndef get_employee(user_id):\r\n    employee = EmployeeBL.get_employee(user_id)\r\n    role = EmployeeBL.get_user_role(user_id)\r\n    ratings = EmployeeBL.get_user_rating(user_id)\r\n    average_rating = round(sum(rating[0] for rating in ratings) / len(ratings), 2)\r\n    user_competencies = EmployeeBL.get_user_competencies(user_id)\r\n    user_strong_side = EmployeeBL.get_user_strong_side(user_id)\r\n    user_weak_side = EmployeeBL.get_user_weak_side(user_id)\r\n    user_recommendations = EmployeeBL.get_user_recommendations(user_id)\r\n    user_summary = EmployeeBL.get_user_summary(user_id)\r\n\r\n\r\n    if employee is None:\r\n\r\n        return jsonify({\"error\": \"Employee not found\"}), 404\r\n\r\n    return jsonify({\r\n        \"rating\": average_rating,\r\n        \"role\": role,\r\n        \"competencies\": user_competencies,\r\n        \"strong_side\": user_strong_side,\r\n        \"weak_side\": user_weak_side,\r\n        \"recommendations\": user_recommendations,\r\n        \"summary\": user_summary\r\n    })\r\n\r\n@employee_route.route(\"/list_employees\", methods=[\"GET\"])\r\ndef get_list_employees():\r\n    employees = EmployeeBL.get_list_employees_with_review_count()\r\n\r\n\r\n    return jsonify(employees)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hack_tool/employee/employee_routes.py b/hack_tool/employee/employee_routes.py
--- a/hack_tool/employee/employee_routes.py	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/hack_tool/employee/employee_routes.py	(date 1730673521298)
@@ -1,4 +1,4 @@
-from flask import Blueprint, jsonify
+from flask import Blueprint, jsonify, request
 
 from hack_tool.bl_models.employee_bl import EmployeeBL
 
@@ -39,3 +39,14 @@
 
     return jsonify(employees)
 
+@employee_route.route("/add_review", methods=["POST"])
+def create_review():
+    user_id = request.json.get("user_id", None)
+    review = request.json.get("review", None)
+
+    success = EmployeeBL.add_new_review(user_id, review)
+    if not success:
+        return jsonify({"Error": "review wasnt created"})
+    else:
+        return jsonify({"message": "review was created"})
+
Index: hack_tool/bl_models/employee_bl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import jsonify\r\nimport json\r\n\r\nfrom hack_tool.dal_models.hr_dal import HrDal\r\nfrom hack_tool.dal_models.employee_dal import EmployeeDAL\r\n\r\n\r\nclass EmployeeBL(object):\r\n    @staticmethod\r\n    def get_employees():\r\n        data = EmployeeDAL.get_employees()\r\n\r\n        return data\r\n\r\n    @staticmethod\r\n    def get_employee(user_id):\r\n        data = EmployeeDAL.get_employee(user_id)\r\n\r\n        return data\r\n\r\n    @staticmethod\r\n    def add_position_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        position = response['role']\r\n        EmployeeDAL.add_position_info(user_id, position)\r\n\r\n\r\n    @staticmethod\r\n    def add_summary_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        content = response['summary']\r\n        EmployeeDAL.add_summary_info(user_id, content)\r\n\r\n    @staticmethod\r\n    def add_competencies_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        for competency, details in response['parameters'].items():\r\n            rating = details['rating']\r\n            description = details.get('description', None)\r\n            EmployeeDAL.add_competencies_info(user_id, competency, rating, description)\r\n\r\n    @staticmethod\r\n    def add_strength_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        for strength in response['strengths']:\r\n            EmployeeDAL.add_strength_info(user_id, strength)\r\n\r\n    @staticmethod\r\n    def add_weak_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        for weakness in response['weaknesses']:\r\n            EmployeeDAL.add_weak_info(user_id, weakness)\r\n\r\n    @staticmethod\r\n    def add_recommendation_info(user_id, response_json):\r\n        response = json.loads(response_json)\r\n        for recommendation in response['recommendations']:\r\n            EmployeeDAL.add_recommendation_info(user_id, recommendation)\r\n\r\n    @staticmethod\r\n    def get_user_rating(user_id):\r\n        rating = EmployeeDAL.get_user_rating(user_id)\r\n\r\n        return rating\r\n\r\n    @staticmethod\r\n    def get_user_competencies(user_id):\r\n        user_data = EmployeeDAL.get_user_competencies(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_user_strong_side(user_id):\r\n        user_data = EmployeeDAL.get_user_strong_side(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_user_weak_side(user_id):\r\n        user_data = EmployeeDAL.get_user_weak_side(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_user_recommendations(user_id):\r\n        user_data = EmployeeDAL.get_user_recommendations(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_user_summary(user_id):\r\n        user_data = EmployeeDAL.get_user_recommendations(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_user_role(user_id):\r\n        user_data = EmployeeDAL.get_user_role(user_id)\r\n\r\n        return user_data\r\n\r\n    @staticmethod\r\n    def get_list_employees_with_review_count():\r\n        data = EmployeeDAL.get_all_employees_with_reviews_count()\r\n\r\n        return data\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hack_tool/bl_models/employee_bl.py b/hack_tool/bl_models/employee_bl.py
--- a/hack_tool/bl_models/employee_bl.py	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/hack_tool/bl_models/employee_bl.py	(date 1730673527485)
@@ -101,6 +101,6 @@
 
     @staticmethod
     def get_list_employees_with_review_count():
-        data = EmployeeDAL.get_all_employees_with_reviews_count()
+        list = EmployeeDAL.get_all_employees_with_reviews_count()
 
-        return data
+        return list
Index: hack_tool/dal_models/employee_dal.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import psycopg2\r\nfrom aiohttp.web_routedef import static\r\nfrom flask import jsonify\r\nfrom numpy.ma.extras import average\r\n\r\nfrom hack_tool.dal_models.hr_dal import HrDal\r\nfrom hack_tool.db_connection import connection_db\r\nfrom psycopg2 import Error\r\n\r\n\r\nclass EmployeeDAL(object):\r\n    @staticmethod\r\n    def get_employees():\r\n        conn = connection_db()\r\n\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT id FROM users;'''\r\n\r\n                cursor.execute(query)\r\n                employees = cursor.fetchall()\r\n\r\n            return employees\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_employee(user_id):\r\n        conn = connection_db()\r\n\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT * FROM users WHERE id = %s;'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                employee = cursor.fetchone()\r\n                print(employee)\r\n\r\n            return employee\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def insert_employee_data(response, user_id):\r\n        conn = connection_db()\r\n        cursor = conn.cursor()\r\n        summary_text = response['summary']\r\n        cursor.execute(\r\n            \"INSERT INTO summary (user_id, context) VALUES (%s, %s)\",\r\n            (user_id, summary_text)\r\n        )\r\n\r\n        for competency, rating in response['parameters'].items():\r\n            content = f\"Оценка {competency} - {rating}\"\r\n            cursor.execute(\r\n                \"INSERT INTO competencies (user_id, name, rating, content) VALUES (%s, %s, %s, %s)\",\r\n                (user_id, competency, rating, content)\r\n            )\r\n        for strength in response['strengths']:\r\n            cursor.execute(\r\n                \"INSERT INTO strength_weak (user_id, strong_side) VALUES (%s, %s)\",\r\n                (user_id, strength)\r\n            )\r\n\r\n\r\n        for weakness in response['weaknesses']:\r\n            cursor.execute(\r\n                \"INSERT INTO strength_weak (user_id, weak_side) VALUES (%s, %s)\",\r\n                (user_id, weakness)\r\n            )\r\n\r\n\r\n        for recommendation in response['recommendations']:\r\n            cursor.execute(\r\n                \"INSERT INTO strength_weak (user_id, recomm) VALUES (%s, %s)\",\r\n                (user_id, recommendation)\r\n            )\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()\r\n\r\n    @staticmethod\r\n    def add_summary_info(user_id, content):\r\n        conn = connection_db()\r\n\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''INSERT INTO summary (user_id, content) VALUES (%s, %s)'''\r\n\r\n                cursor.execute(query, (user_id, content))\r\n                conn.commit()\r\n\r\n\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def add_competencies_info(user_id, competency, rating, description):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''INSERT INTO competencies (user_id, name, rating, content) VALUES (%s, %s, %s, %s)'''\r\n                cursor.execute(query, (user_id, competency, rating, description))\r\n                conn.commit()\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def add_strength_info(user_id, strength):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''INSERT INTO strong_side (user_id, content) VALUES (%s, %s)'''\r\n                cursor.execute(query, (user_id, strength))\r\n                conn.commit()\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def add_weak_info(user_id, weakness):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''INSERT INTO weak_side (user_id, content) VALUES (%s, %s)'''\r\n                cursor.execute(query, (user_id, weakness))\r\n                conn.commit()\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n\r\n    @staticmethod\r\n    def add_recommendation_info(user_id, recommendation):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''INSERT INTO recommendation (user_id, content) VALUES (%s, %s)'''\r\n                cursor.execute(query, (user_id, recommendation))\r\n                conn.commit()\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def add_position_info(user_id, position):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''UPDATE users set job_title = %s WHERE id = %s'''\r\n                cursor.execute(query, (position, user_id))\r\n                conn.commit()\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_rating(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT rating FROM competencies WHERE user_id = %s'''\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n                print(f'RESULT - {result}')\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_competencies(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT name, rating, content FROM competencies WHERE user_id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_strong_side(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT content FROM strong_side WHERE user_id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_weak_side(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT content FROM weak_side WHERE user_id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_recommendations(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT content FROM recommendation WHERE user_id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_summary(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = f'''SELECT content FROM summary WHERE user_id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchall()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_user_role(user_id):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = '''SELECT job_title FROM users WHERE id = %s'''\r\n\r\n                cursor.execute(query, (user_id,))\r\n                result = cursor.fetchone()\r\n\r\n                return result\r\n\r\n        except Exception as e:\r\n            print(str(e))\r\n            return e\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_all_employees_with_reviews_count():\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                # Первый запрос для получения всех пользователей с непустым content\r\n                query = '''SELECT user_id FROM summary WHERE content IS NOT NULL'''\r\n                cursor.execute(query)\r\n                users = cursor.fetchall()\r\n\r\n                result = []\r\n                for user in users:\r\n                    user_id = user[0]\r\n\r\n                    # Подсчитываем среднюю оценку по критериям\r\n                    ratings = EmployeeDAL.get_user_rating(user_id)\r\n                    average_rating = round(sum(rating[0] for rating in ratings) / len(ratings), 2)\r\n\r\n                    # Второй запрос для получения имени и должности пользователя\r\n                    query = '''SELECT name, job_title FROM users WHERE id = %s'''\r\n                    cursor.execute(query, (user_id,))\r\n                    user_info = cursor.fetchone()\r\n\r\n                    # Третий запрос для получения всех отзывов пользователя\r\n                    query = '''SELECT content FROM summary WHERE user_id = %s'''\r\n                    cursor.execute(query, (user_id,))\r\n                    summary = cursor.fetchall()\r\n\r\n                    # Четвертый запрос для подсчета количества отзывов\r\n                    query = '''SELECT count(*) FROM reviews WHERE user_id = %s'''\r\n                    cursor.execute(query, (user_id,))\r\n                    reviews_count = cursor.fetchone()[0]\r\n\r\n                    # Собираем результат\r\n                    result.append({\r\n                        'user_id': user_id,\r\n                        'name': user_info[0],\r\n                        'job_title': user_info[1],\r\n                        'summary': summary,\r\n                        'reviews_count': reviews_count,\r\n                        'average_rating': average_rating\r\n                    })\r\n\r\n                return result\r\n\r\n        except Error as e:\r\n            return str(e)\r\n        finally:\r\n            conn.close()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hack_tool/dal_models/employee_dal.py b/hack_tool/dal_models/employee_dal.py
--- a/hack_tool/dal_models/employee_dal.py	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/hack_tool/dal_models/employee_dal.py	(date 1730673540345)
@@ -1,8 +1,6 @@
 import psycopg2
 from aiohttp.web_routedef import static
 from flask import jsonify
-from numpy.ma.extras import average
-
 from hack_tool.dal_models.hr_dal import HrDal
 from hack_tool.db_connection import connection_db
 from psycopg2 import Error
@@ -314,49 +312,59 @@
         conn = connection_db()
         try:
             with conn.cursor() as cursor:
-                # Первый запрос для получения всех пользователей с непустым content
-                query = '''SELECT user_id FROM summary WHERE content IS NOT NULL'''
+                query = """SELECT id, name, job_title FROM users WHERE job_title IS NOT NULL"""
                 cursor.execute(query)
-                users = cursor.fetchall()
+                employees = cursor.fetchall()
+                user_ids = [employee[0] for employee in employees]
 
-                result = []
-                for user in users:
-                    user_id = user[0]
+                if not user_ids:
+                    return []
 
-                    # Подсчитываем среднюю оценку по критериям
-                    ratings = EmployeeDAL.get_user_rating(user_id)
-                    average_rating = round(sum(rating[0] for rating in ratings) / len(ratings), 2)
 
-                    # Второй запрос для получения имени и должности пользователя
-                    query = '''SELECT name, job_title FROM users WHERE id = %s'''
-                    cursor.execute(query, (user_id,))
-                    user_info = cursor.fetchone()
+                query_count_review = """
+                                    SELECT user_id, COUNT(*) as review_count
+                                    FROM reviews
+                                    WHERE user_id IN %s
+                                    GROUP BY user_id
+                                """
+                cursor.execute(query_count_review, (tuple(user_ids),))
+                review_counts = cursor.fetchall()
 
-                    # Третий запрос для получения всех отзывов пользователя
-                    query = '''SELECT content FROM summary WHERE user_id = %s'''
-                    cursor.execute(query, (user_id,))
-                    summary = cursor.fetchall()
+                query_competencies = """
+                                    SELECT  AVG(rating) as avg_value
+                                    FROM competencies
+                                    WHERE user_id IN %s
+                                    GROUP BY user_id
+                                """
+                cursor.execute(query_competencies, (tuple(user_ids),))
+                competencies = cursor.fetchall()
 
-                    # Четвертый запрос для подсчета количества отзывов
-                    query = '''SELECT count(*) FROM reviews WHERE user_id = %s'''
-                    cursor.execute(query, (user_id,))
-                    reviews_count = cursor.fetchone()[0]
 
-                    # Собираем результат
-                    result.append({
-                        'user_id': user_id,
-                        'name': user_info[0],
-                        'job_title': user_info[1],
-                        'summary': summary,
-                        'reviews_count': reviews_count,
-                        'average_rating': average_rating
-                    })
+                query_summary = """
+                                    SELECT content
+                                    FROM summary
+                                    WHERE user_id IN %s
+                                """
+                cursor.execute(query_summary, (tuple(user_ids),))
+                summaries = cursor.fetchall()
 
-                return result
+                # Объединение данных
+                employee_reviews = []
+                for employee in employees:
+                    user_id = employee[0]
+                    review_count = next((rc[1] for rc in review_counts if rc[0] == user_id), 0)
+                    avg_competency = next((comp[1] for comp in competencies if comp[0] == user_id), None)
+                    summary_text = next((summ[1] for summ in summaries if summ[0] == user_id), None)
+                    employee_reviews.append({
+                        'employee': employee,
+                        'review_count': review_count,
+                        'avg_competency': avg_competency,
+                        'summary_text': summary_text
+                    })
 
+                return employee_reviews
         except Error as e:
             return str(e)
         finally:
             conn.close()
 
-
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3f41eaae-10cb-4030-8382-15e27e5432b8\" name=\"Changes\" comment=\"add function for returning info about summary of employee\">\r\n      <change afterPath=\"$PROJECT_DIR$/hack_tool/bl_models/chat_bl.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/hack_tool/chat/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/hack_tool/chat/chat_routes.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/hack_tool/dal_models/chat_dal.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/innhackaton.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/innhackaton.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/__init__.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/__init__.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/bl_models/employee_bl.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/bl_models/employee_bl.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/comparison/comparison_routes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/comparison/comparison_routes.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/dal_models/employee_dal.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/dal_models/employee_dal.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/employee/employee_routes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/employee/employee_routes.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hack_tool/llama_api/proccess_comparison.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hack_tool/llama_api/proccess_comparison.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;AbdullinRR&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Gapenysh/innohack.git&quot;,\r\n    &quot;accountId&quot;: &quot;553dbff4-694e-4fbb-b85b-3c527105cef2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oHqkGas9IL77JhycJbMKxaMjfD\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.db_connection.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.employee_bl.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.employee_dal.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.run.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"run\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"innhackaton\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/hack_tool\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/hack_tool/run.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0e3be3396995-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3f41eaae-10cb-4030-8382-15e27e5432b8\" name=\"Changes\" comment=\"\" />\r\n      <created>1730536989879</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730536989879</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"get employees\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730557937990</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730557937990</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"add function for returning info about summary of employee\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730637075474</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730637075474</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"get employees\" />\r\n    <MESSAGE value=\"add function for returning info about summary of employee\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add function for returning info about summary of employee\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision edfe0a279f234534f6e097693b38a799318796da)
+++ b/.idea/workspace.xml	(date 1730674138501)
@@ -4,20 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="3f41eaae-10cb-4030-8382-15e27e5432b8" name="Changes" comment="add function for returning info about summary of employee">
-      <change afterPath="$PROJECT_DIR$/hack_tool/bl_models/chat_bl.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/hack_tool/chat/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/hack_tool/chat/chat_routes.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/hack_tool/dal_models/chat_dal.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/innhackaton.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/innhackaton.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="3f41eaae-10cb-4030-8382-15e27e5432b8" name="Changes" comment="Create chat module and redact get_employee function(add role)">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hack_tool/__init__.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/__init__.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hack_tool/bl_models/employee_bl.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/bl_models/employee_bl.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hack_tool/comparison/comparison_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/comparison/comparison_routes.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hack_tool/dal_models/employee_dal.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/dal_models/employee_dal.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hack_tool/employee/employee_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/employee/employee_routes.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hack_tool/llama_api/proccess_comparison.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/llama_api/proccess_comparison.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/hack_tool/hr/hr_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/hr/hr_routes.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/hack_tool/llama_api/proccess.py" beforeDir="false" afterPath="$PROJECT_DIR$/hack_tool/llama_api/proccess.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -26,6 +19,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="RESET_MODE" value="MIXED" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -50,16 +44,21 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python.db_connection.executor&quot;: &quot;Run&quot;,
-    &quot;Python.employee_bl.executor&quot;: &quot;Run&quot;,
-    &quot;Python.employee_dal.executor&quot;: &quot;Run&quot;,
-    &quot;Python.run.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.db_connection.executor": "Run",
+    "Python.employee_bl.executor": "Run",
+    "Python.employee_dal.executor": "Run",
+    "Python.run.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "master"
+  },
+  "keyToStringList": {
+    "ChangesTree.GroupingKeys": [
+      "directory"
+    ]
   }
-}</component>
+}]]></component>
   <component name="RunManager">
     <configuration name="run" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="innhackaton" />
@@ -116,7 +115,23 @@
       <option name="project" value="LOCAL" />
       <updated>1730637075474</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Create chat module and redact get_employee function(add role)">
+      <option name="closed" value="true" />
+      <created>1730665234602</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1730665234602</updated>
+    </task>
+    <task id="LOCAL-00004" summary="Create chat module and redact get_employee function(add role)">
+      <option name="closed" value="true" />
+      <created>1730665244618</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1730665244618</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -133,6 +148,7 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="get employees" />
     <MESSAGE value="add function for returning info about summary of employee" />
-    <option name="LAST_COMMIT_MESSAGE" value="add function for returning info about summary of employee" />
+    <MESSAGE value="Create chat module and redact get_employee function(add role)" />
+    <option name="LAST_COMMIT_MESSAGE" value="Create chat module and redact get_employee function(add role)" />
   </component>
 </project>
\ No newline at end of file
